#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <gmp.h>

void matrix_multiply(mpz_t a[2][2], mpz_t b[2][2]) {
    mpz_t x, y, z, w;
    mpz_inits(x, y, z, w, NULL);

    mpz_mul(x, a[0][0], b[0][0]);
    mpz_add(x, x, mpz_mul_ui(a[0][1], b[1][0]));

    mpz_mul(y, a[0][0], b[0][1]);
    mpz_add(y, y, mpz_mul_ui(a[0][1], b[1][1]));

    mpz_mul(z, a[1][0], b[0][0]);
    mpz_add(z, z, mpz_mul_ui(a[1][1], b[1][0]));

    mpz_mul(w, a[1][0], b[0][1]);
    mpz_add(w, w, mpz_mul_ui(a[1][1], b[1][1]));

    mpz_set(a[0][0], x);
    mpz_set(a[0][1], y);
    mpz_set(a[1][0], z);
    mpz_set(a[1][1], w);

    mpz_clears(x, y, z, w, NULL);
}

void matrix_power(mpz_t F[2][2], unsigned long long n) {
    if (n == 0 || n == 1)
        return;

    mpz_t M[2][2];
    for (int i = 0; i < 2; i++)
        for (int j = 0; j < 2; j++)
            mpz_init_set_ui(M[i][j], (i == j));

    mpz_t base[2][2];
    mpz_init_set_ui(base[0][0], 1);
    mpz_init_set_ui(base[0][1], 1);
    mpz_init_set_ui(base[1][0], 1);
    mpz_init_set_ui(base[1][1], 0);

    while (n > 0) {
        if (n % 2 == 1)
            matrix_multiply(M, base);
        matrix_multiply(base, base);
        n /= 2;
    }

    for (int i = 0; i < 2; i++)
        for (int j = 0; j < 2; j++)
            mpz_set(F[i][j], M[i][j]);

    for (int i = 0; i < 2; i++)
        for (int j = 0; j < 2; j++)
            mpz_clear(M[i][j]);
}

void fibonacci(mpz_t result, unsigned long long n) {
    if (n == 0) {
        mpz_set_ui(result, 0);
        return;
    }

    mpz_t F[2][2];
    mpz_init_set_ui(F[0][0], 1);
    mpz_init_set_ui(F[0][1], 1);
    mpz_init_set_ui(F[1][0], 1);
    mpz_init_set_ui(F[1][1], 0);

    matrix_power(F, n - 1);
    mpz_set(result, F[0][0]);

    for (int i = 0; i < 2; i++)
        for (int j = 0; j < 2; j++)
            mpz_clear(F[i][j]);
}

int main() {
    unsigned long long values[] = {50, 100, 1000, 10000, 100000, 1000000};
    mpz_t result;
    mpz_init(result);

    printf("N\tTime (seconds)\n");
    for (int i = 0; i < 6; i++) {
        unsigned long long n = values[i];
        clock_t start = clock();
        fibonacci(result, n);
        clock_t end = clock();
        double elapsed = (double)(end - start) / CLOCKS_PER_SEC;
        printf("%llu\t%.6f\n", n, elapsed);
    }

    mpz_clear(result);
    return 0;
}
