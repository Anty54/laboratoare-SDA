#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void initialize(int *v, int n) {
    for (int i = 0; i < n; i++) {
        v[i] = rand() % 10000;
    }
}

void display(int *v, int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", v[i]);
    }
    printf("\n");
}

void selection_sort(int *v, int n) {
    for (int i = 0; i < n - 1; i++) {
        int min = i;
        for (int j = i + 1; j < n; j++)
            if (v[j] < v[min])
                min = j;
        if (min != i) {
            int temp = v[i];
            v[i] = v[min];
            v[min] = temp;
        }
    }
}

void quick_sort(int *v, int left, int right) {
    if (left < right) {
        int pivot = v[right];
        int i = left - 1;
        for (int j = left; j < right; j++) {
            if (v[j] < pivot) {
                i++;
                int temp = v[i];
                v[i] = v[j];
                v[j] = temp;
            }
        }
        int temp = v[i + 1];
        v[i + 1] = v[right];
        v[right] = temp;

        int p = i + 1;
        quick_sort(v, left, p - 1);
        quick_sort(v, p + 1, right);
    }
}

void copy_array(int *src, int *dest, int n) {
    for (int i = 0; i < n; i++)
        dest[i] = src[i];
}

int main() {
    int *v = NULL, *temp = NULL, n, opt;
    clock_t start, end;

    do {
        printf("\nMENU:\n");
        printf("1. Initialize array with random numbers\n");
        printf("2. Display array\n");
        printf("3. Sort using simple method (selection sort)\n");
        printf("4. Sort using efficient method (quick sort)\n");
        printf("5. Sort time analysis for N = 100, 1000, 10000, 100000\n");
        printf("6. Free memory and exit\n");
        printf("Option: ");
        scanf("%d", &opt);

        switch (opt) {
            case 1:
                printf("Enter array size: ");
                scanf("%d", &n);
                v = (int *)malloc(n * sizeof(int));
                initialize(v, n);
                break;

            case 2:
                if (v) display(v, n);
                else printf("Array is not initialized!\n");
                break;

            case 3:
                if (v) {
                    temp = (int *)malloc(n * sizeof(int));
                    copy_array(v, temp, n);
                    start = clock();
                    selection_sort(temp, n);
                    end = clock();
                    printf("Selection sort time: %.6f seconds\n", (double)(end - start) / CLOCKS_PER_SEC);
                    free(temp);
                } else {
                    printf("Array is not initialized!\n");
                }
                break;

            case 4:
                if (v) {
                    temp = (int *)malloc(n * sizeof(int));
                    copy_array(v, temp, n);
                    start = clock();
                    quick_sort(temp, 0, n - 1);
                    end = clock();
                    printf("Quick sort time: %.6f seconds\n", (double)(end - start) / CLOCKS_PER_SEC);
                    free(temp);
                } else {
                    printf("Array is not initialized!\n");
                }
                break;

            case 5: {
                int sizes[] = {100, 1000, 10000, 100000};
                printf("\nTime analysis:\n");
                printf("N\tSelectionSort\tQuickSort\n");
                for (int i = 0; i < 4; i++) {
                    n = sizes[i];
                    v = (int *)malloc(n * sizeof(int));
                    temp = (int *)malloc(n * sizeof(int));
                    initialize(v, n);

                    copy_array(v, temp, n);
                    start = clock();
                    selection_sort(temp, n);
                    end = clock();
                    double t1 = (double)(end - start) / CLOCKS_PER_SEC;

                    copy_array(v, temp, n);
                    start = clock();
                    quick_sort(temp, 0, n - 1);
                    end = clock();
                    double t2 = (double)(end - start) / CLOCKS_PER_SEC;

                    printf("%d\t%.6f\t%.6f\n", n, t1, t2);
                    free(v);
                    free(temp);
                }
                break;
            }

            case 6:
                free(v);
                printf("Memory freed. Exiting...\n");
                break;

            default:
                printf("Invalid option!\n");
        }

    } while (opt != 6);

    return 0;
}

