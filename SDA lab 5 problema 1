#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void initializeArray(int *array, int n) {
    for (int i = 0; i < n; i++) {
        array[i] = rand() % 10000;
    }
}

void displayArray(int *array, int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
}

void selectionSort(int *array, int n) {
    for (int i = 0; i < n - 1; i++) {
        int min = i;
        for (int j = i + 1; j < n; j++) {
            if (array[j] < array[min])
                min = j;
        }
        if (min != i) {
            int temp = array[i];
            array[i] = array[min];
            array[min] = temp;
        }
    }
}

void heapify(int *array, int n, int i) {
    int largest = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;
    if (l < n && array[l] > array[largest])
        largest = l;
    if (r < n && array[r] > array[largest])
        largest = r;
    if (largest != i) {
        int temp = array[i];
        array[i] = array[largest];
        array[largest] = temp;
        heapify(array, n, largest);
    }
}

void heapSort(int *array, int n) {
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(array, n, i);
    for (int i = n - 1; i >= 0; i--) {
        int temp = array[0];
        array[0] = array[i];
        array[i] = temp;
        heapify(array, i, 0);
    }
}

void empiricalAnalysis() {
    int sizes[] = {100, 1000, 10000, 100000};
    printf("N\tSelection Sort\tHeap Sort\n");
    for (int s = 0; s < 4; s++) {
        int n = sizes[s];
        int *array1 = (int *)malloc(n * sizeof(int));
        int *array2 = (int *)malloc(n * sizeof(int));
        for (int i = 0; i < n; i++) {
            int val = rand() % 10000;
            array1[i] = val;
            array2[i] = val;
        }
        clock_t start1 = clock();
        selectionSort(array1, n);
        clock_t end1 = clock();

        clock_t start2 = clock();
        heapSort(array2, n);
        clock_t end2 = clock();

        printf("%d\t%.4lf s\t%.4lf s\n", n,
               (double)(end1 - start1) / CLOCKS_PER_SEC,
               (double)(end2 - start2) / CLOCKS_PER_SEC);
        free(array1);
        free(array2);
    }
}

int main() {
    int *array = NULL, n = 0;
    int choice;
    srand(time(NULL));
    do {
        printf("\nMenu:\n");
        printf("1. Initialize array\n");
        printf("2. Display array\n");
        printf("3. Free array memory\n");
        printf("4. Sort array with selection sort and show time\n");
        printf("5. Sort array with heap sort and show time\n");
        printf("6. Empirical time analysis\n");
        printf("7. Exit\n");
        printf("Choose: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter size: ");
                scanf("%d", &n);
                array = (int *)malloc(n * sizeof(int));
                initializeArray(array, n);
                break;
            case 2:
                if (array)
                    displayArray(array, n);
                else
                    printf("Array is empty.\n");
                break;
            case 3:
                free(array);
                array = NULL;
                n = 0;
                break;
            case 4:
                if (array) {
                    clock_t start = clock();
                    selectionSort(array, n);
                    clock_t end = clock();
                    printf("Sorted in %.4lf seconds\n", (double)(end - start) / CLOCKS_PER_SEC);
                }
                break;
            case 5:
                if (array) {
                    clock_t start = clock();
                    heapSort(array, n);
                    clock_t end = clock();
                    printf("Sorted in %.4lf seconds\n", (double)(end - start) / CLOCKS_PER_SEC);
                }
                break;
            case 6:
                empiricalAnalysis();
                break;
            case 7:
                if (array) free(array);
                break;
        }
    } while (choice != 7);
    return 0;
}
